/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package creditcardfraud;

import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.UnknownHostException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author terence
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    Connection con = null;
    
    public Menu() {
        initComponents();
        con = db.mycon();
        
        // Clear the table before loading new data
        DefaultTableModel model = (DefaultTableModel) tblPayments.getModel();
        model.setRowCount(0);
        
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM payments WHERE user_id = 1");
            
            // Loop through the result set and add each payment to the table model
            while (rs.next()) {
                Object[] row = new Object[4];
                row[0] = rs.getString("available_balance");
                row[1] = rs.getString("payment_amount");                               
                row[2] = rs.getString("payment_country");
                row[3] = rs.getString("payment_date");
                model.addRow(row);
            }
            
            // Close the database connection
            rs.close();
        } catch (SQLException ex) {

        }
    }
    
    
    Menu(String un) {
        this(); // Call the default constructor
        jLabel2.setText("User: " + un); // Set the username label
    }

    private String getUserCountry() {
    try {
      URL url = new URL("http://ip-api.com/json");
      HttpURLConnection connection = (HttpURLConnection) url.openConnection();
      connection.setRequestMethod("GET");

      int responseCode = connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_OK) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String line;
        StringBuilder response = new StringBuilder();

        while ((line = reader.readLine()) != null) {
          response.append(line);
        }
        reader.close();

        String jsonResponse = response.toString();
        String country = extractCountryFromJson(jsonResponse);
        return country;
      }
    } catch (IOException e) {
    }
    return null;
}
    
    private String extractCountryFromJson(String jsonResponse) {
        String country = null;
        try {
          int startIndex = jsonResponse.indexOf("\"country\":\"") + 11;
          int endIndex = jsonResponse.indexOf("\"", startIndex);
          country = jsonResponse.substring(startIndex, endIndex);
        } catch (Exception e) {
            
        }
        return country;
  }
    
    private boolean verifyCreditCardNumber(String cardNumber) {
    // Remove any spaces or dashes from the card number
    String sanitizedCardNumber = cardNumber.replaceAll("[\\s-]", "");

    // Check if the card number contains only digits
    if (!sanitizedCardNumber.matches("\\d+")) {
        return false;
    }

    int sum = 0;
    boolean isDoubleDigit = false;

    // Iterate over the digits in reverse order
    for (int i = sanitizedCardNumber.length() - 1; i >= 0; i--) {
        int digit = Character.getNumericValue(sanitizedCardNumber.charAt(i));

        if (isDoubleDigit) {
            // Double the digit and subtract 9 if it becomes greater than 9
            digit *= 2;
            if (digit > 9) {
                digit -= 9;
            }
        }

        sum += digit;
        isDoubleDigit = !isDoubleDigit;
    }

    // The card number is valid if the sum is divisible by 10
    return sum % 10 == 0;
}

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPayments = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        accNum = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        amt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton2.setBackground(new java.awt.Color(255, 153, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Make Payment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Menu");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        tblPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Available Amount", "Payment Amount", "Country", "Payment Date"
            }
        ));
        jScrollPane1.setViewportView(tblPayments);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Payment Amount");

        accNum.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        accNum.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Card Number ");

        amt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        amt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        amt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amtActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 204, 0));

        jButton1.setBackground(new java.awt.Color(255, 204, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(accNum, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amt, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(163, 163, 163)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2))
                        .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(accNum, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.setVisible(false);
        try {
            new LoginForm().setVisible(true);
        } catch (UnknownHostException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void amtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amtActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Make payments
        String payAmount = accNum.getText();
        String cardNumber = amt.getText();
        String userCountry = getUserCountry();

        // Verify the credit card number using the Luhn algorithm
        boolean isCardNumberValid = verifyCreditCardNumber(cardNumber);

        if (!isCardNumberValid) {
            JOptionPane.showMessageDialog(this, "Invalid credit card number. Payment cannot be processed.");
            return;
        }

        // Get the latest available balance from the payment table
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT available_balance FROM payments WHERE user_id = 1 ORDER BY payment_date DESC LIMIT 1");
            if (rs.next()) {
                double availableBalance = rs.getDouble("available_balance");

                // Perform the payment logic using the retrieved data
                double paymentAmount = Double.parseDouble(payAmount);

                if (paymentAmount > availableBalance) {
                    JOptionPane.showMessageDialog(this, "Insufficient funds. Payment cannot be processed.");
                } else {
                    double updatedBalance = availableBalance - paymentAmount;

                    // Initialize the payment history list
                    List<Payment> paymentHistory = new ArrayList<>();

                    try {
                        Statement stMent = con.createStatement();
                        ResultSet result = stMent.executeQuery("SELECT * FROM payments ORDER BY payment_date DESC");

                        while (rs.next()) {
                            String paymentCountry = rs.getString("payment_country");
                            double payAmt = result.getDouble("payment_amount");

                            Payment payment = new Payment(paymentCountry,payAmt);
                            paymentHistory.add(payment);
                        }

                        rs.close();
                    } catch (SQLException ex) {
                        // Handle any errors that occur during the database operation
                        JOptionPane.showMessageDialog(this, "Failed to retrieve payment history: " + ex.getMessage());
                    }

                    // Perform anomaly detection
                    AnomalyDetector detector = new AnomalyDetector(paymentHistory);
                    Payment payment = new Payment(userCountry,paymentAmount); // Assuming paymentAmount is a double value
                    boolean isAnomaly = detector.isAnomalyDetected(payment);

                    if (isAnomaly) {
                        JOptionPane.showMessageDialog(null, "Anomaly detected. Payment cannot be processed.");
                        this.setVisible(false);
                        new LoginForm().setVisible(true);
                    } else {
                        // Insert the new payment entry into the payment table
                        String insertQuery = "INSERT INTO payments (user_id, payment_date, payment_amount,available_balance, payment_country) VALUES (?, NOW(), ?, ?, ?)";
                        PreparedStatement insertStmt = con.prepareStatement(insertQuery);

                        insertStmt.setInt(1, 1);  // Assuming the user ID is 1
                        insertStmt.setDouble(2, paymentAmount);
                        insertStmt.setDouble(3, updatedBalance);
                        insertStmt.setString(4, userCountry);

                        insertStmt.executeUpdate();
                        insertStmt.close();

                        // Display a success message
                        JOptionPane.showMessageDialog(this, "Payment successful!");

                        // Update the table to display the new payment
                        DefaultTableModel model = (DefaultTableModel) tblPayments.getModel();
                        Object[] row = new Object[4];
                        row[0] = String.valueOf(updatedBalance);  // Set the updated available balance
                        row[1] = payAmount;  // Set the payment amount
                        row[2] = userCountry;  // Set the payment country
                        // Set the current date and time for the payment
                        LocalDateTime now = LocalDateTime.now();
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                        row[3] = now.format(formatter);
                        model.addRow(row);
                    }
                }
            }
            rs.close();
        } catch (SQLException ex) {
            // Handle any errors that occur during the database operation
            JOptionPane.showMessageDialog(this, "Payment failed: " + ex.getMessage());
        } catch (UnknownHostException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accNum;
    private javax.swing.JTextField amt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPayments;
    // End of variables declaration//GEN-END:variables
}
